// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package apps

import (
	"github.com/aerogear/mobile-security-service/pkg/models"
	"sync"
)

var (
	lockRepositoryMockCreateDevice                          sync.RWMutex
	lockRepositoryMockDisableAllAppVersionsByAppID          sync.RWMutex
	lockRepositoryMockGetAppByAppID                         sync.RWMutex
	lockRepositoryMockGetAppByID                            sync.RWMutex
	lockRepositoryMockGetAppVersionsByAppID                 sync.RWMutex
	lockRepositoryMockGetApps                               sync.RWMutex
	lockRepositoryMockGetDeviceByDeviceID                   sync.RWMutex
	lockRepositoryMockGetDeviceByDeviceIDAndAppID           sync.RWMutex
	lockRepositoryMockGetDeviceByVersionAndAppID            sync.RWMutex
	lockRepositoryMockGetVersionByAppIDAndVersion           sync.RWMutex
	lockRepositoryMockInsertVersionOrUpdateNumOfAppLaunches sync.RWMutex
	lockRepositoryMockUpdateAppVersions                     sync.RWMutex
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//     func TestSomethingThatUsesRepository(t *testing.T) {
//
//         // make and configure a mocked Repository
//         mockedRepository := &RepositoryMock{
//             CreateDeviceFunc: func(device *models.Device) error {
// 	               panic("mock out the CreateDevice method")
//             },
//             DisableAllAppVersionsByAppIDFunc: func(appID string, message string) error {
// 	               panic("mock out the DisableAllAppVersionsByAppID method")
//             },
//             GetAppByAppIDFunc: func(appID string) (*models.App, error) {
// 	               panic("mock out the GetAppByAppID method")
//             },
//             GetAppByIDFunc: func(ID string) (*models.App, error) {
// 	               panic("mock out the GetAppByID method")
//             },
//             GetAppVersionsByAppIDFunc: func(ID string) (*[]models.Version, error) {
// 	               panic("mock out the GetAppVersionsByAppID method")
//             },
//             GetAppsFunc: func() (*[]models.App, error) {
// 	               panic("mock out the GetApps method")
//             },
//             GetDeviceByDeviceIDFunc: func(deviceID string) (*models.Device, error) {
// 	               panic("mock out the GetDeviceByDeviceID method")
//             },
//             GetDeviceByDeviceIDAndAppIDFunc: func(deviceID string, appID string) (*models.Device, error) {
// 	               panic("mock out the GetDeviceByDeviceIDAndAppID method")
//             },
//             GetDeviceByVersionAndAppIDFunc: func(versionID string, appID string) (*models.Device, error) {
// 	               panic("mock out the GetDeviceByVersionAndAppID method")
//             },
//             GetVersionByAppIDAndVersionFunc: func(appID string, versionNumber string) (*models.Version, error) {
// 	               panic("mock out the GetVersionByAppIDAndVersion method")
//             },
//             InsertVersionOrUpdateNumOfAppLaunchesFunc: func(version *models.Version) error {
// 	               panic("mock out the InsertVersionOrUpdateNumOfAppLaunches method")
//             },
//             UpdateAppVersionsFunc: func(versions []models.Version) error {
// 	               panic("mock out the UpdateAppVersions method")
//             },
//         }
//
//         // use mockedRepository in code that requires Repository
//         // and then make assertions.
//
//     }
type RepositoryMock struct {
	// CreateDeviceFunc mocks the CreateDevice method.
	CreateDeviceFunc func(device *models.Device) error

	// DisableAllAppVersionsByAppIDFunc mocks the DisableAllAppVersionsByAppID method.
	DisableAllAppVersionsByAppIDFunc func(appID string, message string) error

	// GetAppByAppIDFunc mocks the GetAppByAppID method.
	GetAppByAppIDFunc func(appID string) (*models.App, error)

	// GetAppByIDFunc mocks the GetAppByID method.
	GetAppByIDFunc func(ID string) (*models.App, error)

	// GetAppVersionsByAppIDFunc mocks the GetAppVersionsByAppID method.
	GetAppVersionsByAppIDFunc func(ID string) (*[]models.Version, error)

	// GetAppsFunc mocks the GetApps method.
	GetAppsFunc func() (*[]models.App, error)

	// GetDeviceByDeviceIDFunc mocks the GetDeviceByDeviceID method.
	GetDeviceByDeviceIDFunc func(deviceID string) (*models.Device, error)

	// GetDeviceByDeviceIDAndAppIDFunc mocks the GetDeviceByDeviceIDAndAppID method.
	GetDeviceByDeviceIDAndAppIDFunc func(deviceID string, appID string) (*models.Device, error)

	// GetDeviceByVersionAndAppIDFunc mocks the GetDeviceByVersionAndAppID method.
	GetDeviceByVersionAndAppIDFunc func(versionID string, appID string) (*models.Device, error)

	// GetVersionByAppIDAndVersionFunc mocks the GetVersionByAppIDAndVersion method.
	GetVersionByAppIDAndVersionFunc func(appID string, versionNumber string) (*models.Version, error)

	// InsertVersionOrUpdateNumOfAppLaunchesFunc mocks the InsertVersionOrUpdateNumOfAppLaunches method.
	InsertVersionOrUpdateNumOfAppLaunchesFunc func(version *models.Version) error

	// UpdateAppVersionsFunc mocks the UpdateAppVersions method.
	UpdateAppVersionsFunc func(versions []models.Version) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateDevice holds details about calls to the CreateDevice method.
		CreateDevice []struct {
			// Device is the device argument value.
			Device *models.Device
		}
		// DisableAllAppVersionsByAppID holds details about calls to the DisableAllAppVersionsByAppID method.
		DisableAllAppVersionsByAppID []struct {
			// AppID is the appID argument value.
			AppID string
			// Message is the message argument value.
			Message string
		}
		// GetAppByAppID holds details about calls to the GetAppByAppID method.
		GetAppByAppID []struct {
			// AppID is the appID argument value.
			AppID string
		}
		// GetAppByID holds details about calls to the GetAppByID method.
		GetAppByID []struct {
			// ID is the ID argument value.
			ID string
		}
		// GetAppVersionsByAppID holds details about calls to the GetAppVersionsByAppID method.
		GetAppVersionsByAppID []struct {
			// ID is the ID argument value.
			ID string
		}
		// GetApps holds details about calls to the GetApps method.
		GetApps []struct {
		}
		// GetDeviceByDeviceID holds details about calls to the GetDeviceByDeviceID method.
		GetDeviceByDeviceID []struct {
			// DeviceID is the deviceID argument value.
			DeviceID string
		}
		// GetDeviceByDeviceIDAndAppID holds details about calls to the GetDeviceByDeviceIDAndAppID method.
		GetDeviceByDeviceIDAndAppID []struct {
			// DeviceID is the deviceID argument value.
			DeviceID string
			// AppID is the appID argument value.
			AppID string
		}
		// GetDeviceByVersionAndAppID holds details about calls to the GetDeviceByVersionAndAppID method.
		GetDeviceByVersionAndAppID []struct {
			// VersionID is the versionID argument value.
			VersionID string
			// AppID is the appID argument value.
			AppID string
		}
		// GetVersionByAppIDAndVersion holds details about calls to the GetVersionByAppIDAndVersion method.
		GetVersionByAppIDAndVersion []struct {
			// AppID is the appID argument value.
			AppID string
			// VersionNumber is the versionNumber argument value.
			VersionNumber string
		}
		// InsertVersionOrUpdateNumOfAppLaunches holds details about calls to the InsertVersionOrUpdateNumOfAppLaunches method.
		InsertVersionOrUpdateNumOfAppLaunches []struct {
			// Version is the version argument value.
			Version *models.Version
		}
		// UpdateAppVersions holds details about calls to the UpdateAppVersions method.
		UpdateAppVersions []struct {
			// Versions is the versions argument value.
			Versions []models.Version
		}
	}
}

// CreateDevice calls CreateDeviceFunc.
func (mock *RepositoryMock) CreateDevice(device *models.Device) error {
	if mock.CreateDeviceFunc == nil {
		panic("RepositoryMock.CreateDeviceFunc: method is nil but Repository.CreateDevice was just called")
	}
	callInfo := struct {
		Device *models.Device
	}{
		Device: device,
	}
	lockRepositoryMockCreateDevice.Lock()
	mock.calls.CreateDevice = append(mock.calls.CreateDevice, callInfo)
	lockRepositoryMockCreateDevice.Unlock()
	return mock.CreateDeviceFunc(device)
}

// CreateDeviceCalls gets all the calls that were made to CreateDevice.
// Check the length with:
//     len(mockedRepository.CreateDeviceCalls())
func (mock *RepositoryMock) CreateDeviceCalls() []struct {
	Device *models.Device
} {
	var calls []struct {
		Device *models.Device
	}
	lockRepositoryMockCreateDevice.RLock()
	calls = mock.calls.CreateDevice
	lockRepositoryMockCreateDevice.RUnlock()
	return calls
}

// DisableAllAppVersionsByAppID calls DisableAllAppVersionsByAppIDFunc.
func (mock *RepositoryMock) DisableAllAppVersionsByAppID(appID string, message string) error {
	if mock.DisableAllAppVersionsByAppIDFunc == nil {
		panic("RepositoryMock.DisableAllAppVersionsByAppIDFunc: method is nil but Repository.DisableAllAppVersionsByAppID was just called")
	}
	callInfo := struct {
		AppID   string
		Message string
	}{
		AppID:   appID,
		Message: message,
	}
	lockRepositoryMockDisableAllAppVersionsByAppID.Lock()
	mock.calls.DisableAllAppVersionsByAppID = append(mock.calls.DisableAllAppVersionsByAppID, callInfo)
	lockRepositoryMockDisableAllAppVersionsByAppID.Unlock()
	return mock.DisableAllAppVersionsByAppIDFunc(appID, message)
}

// DisableAllAppVersionsByAppIDCalls gets all the calls that were made to DisableAllAppVersionsByAppID.
// Check the length with:
//     len(mockedRepository.DisableAllAppVersionsByAppIDCalls())
func (mock *RepositoryMock) DisableAllAppVersionsByAppIDCalls() []struct {
	AppID   string
	Message string
} {
	var calls []struct {
		AppID   string
		Message string
	}
	lockRepositoryMockDisableAllAppVersionsByAppID.RLock()
	calls = mock.calls.DisableAllAppVersionsByAppID
	lockRepositoryMockDisableAllAppVersionsByAppID.RUnlock()
	return calls
}

// GetAppByAppID calls GetAppByAppIDFunc.
func (mock *RepositoryMock) GetAppByAppID(appID string) (*models.App, error) {
	if mock.GetAppByAppIDFunc == nil {
		panic("RepositoryMock.GetAppByAppIDFunc: method is nil but Repository.GetAppByAppID was just called")
	}
	callInfo := struct {
		AppID string
	}{
		AppID: appID,
	}
	lockRepositoryMockGetAppByAppID.Lock()
	mock.calls.GetAppByAppID = append(mock.calls.GetAppByAppID, callInfo)
	lockRepositoryMockGetAppByAppID.Unlock()
	return mock.GetAppByAppIDFunc(appID)
}

// GetAppByAppIDCalls gets all the calls that were made to GetAppByAppID.
// Check the length with:
//     len(mockedRepository.GetAppByAppIDCalls())
func (mock *RepositoryMock) GetAppByAppIDCalls() []struct {
	AppID string
} {
	var calls []struct {
		AppID string
	}
	lockRepositoryMockGetAppByAppID.RLock()
	calls = mock.calls.GetAppByAppID
	lockRepositoryMockGetAppByAppID.RUnlock()
	return calls
}

// GetAppByID calls GetAppByIDFunc.
func (mock *RepositoryMock) GetAppByID(ID string) (*models.App, error) {
	if mock.GetAppByIDFunc == nil {
		panic("RepositoryMock.GetAppByIDFunc: method is nil but Repository.GetAppByID was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: ID,
	}
	lockRepositoryMockGetAppByID.Lock()
	mock.calls.GetAppByID = append(mock.calls.GetAppByID, callInfo)
	lockRepositoryMockGetAppByID.Unlock()
	return mock.GetAppByIDFunc(ID)
}

// GetAppByIDCalls gets all the calls that were made to GetAppByID.
// Check the length with:
//     len(mockedRepository.GetAppByIDCalls())
func (mock *RepositoryMock) GetAppByIDCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockRepositoryMockGetAppByID.RLock()
	calls = mock.calls.GetAppByID
	lockRepositoryMockGetAppByID.RUnlock()
	return calls
}

// GetAppVersionsByAppID calls GetAppVersionsByAppIDFunc.
func (mock *RepositoryMock) GetAppVersionsByAppID(ID string) (*[]models.Version, error) {
	if mock.GetAppVersionsByAppIDFunc == nil {
		panic("RepositoryMock.GetAppVersionsByAppIDFunc: method is nil but Repository.GetAppVersionsByAppID was just called")
	}
	callInfo := struct {
		ID string
	}{
		ID: ID,
	}
	lockRepositoryMockGetAppVersionsByAppID.Lock()
	mock.calls.GetAppVersionsByAppID = append(mock.calls.GetAppVersionsByAppID, callInfo)
	lockRepositoryMockGetAppVersionsByAppID.Unlock()
	return mock.GetAppVersionsByAppIDFunc(ID)
}

// GetAppVersionsByAppIDCalls gets all the calls that were made to GetAppVersionsByAppID.
// Check the length with:
//     len(mockedRepository.GetAppVersionsByAppIDCalls())
func (mock *RepositoryMock) GetAppVersionsByAppIDCalls() []struct {
	ID string
} {
	var calls []struct {
		ID string
	}
	lockRepositoryMockGetAppVersionsByAppID.RLock()
	calls = mock.calls.GetAppVersionsByAppID
	lockRepositoryMockGetAppVersionsByAppID.RUnlock()
	return calls
}

// GetApps calls GetAppsFunc.
func (mock *RepositoryMock) GetApps() (*[]models.App, error) {
	if mock.GetAppsFunc == nil {
		panic("RepositoryMock.GetAppsFunc: method is nil but Repository.GetApps was just called")
	}
	callInfo := struct {
	}{}
	lockRepositoryMockGetApps.Lock()
	mock.calls.GetApps = append(mock.calls.GetApps, callInfo)
	lockRepositoryMockGetApps.Unlock()
	return mock.GetAppsFunc()
}

// GetAppsCalls gets all the calls that were made to GetApps.
// Check the length with:
//     len(mockedRepository.GetAppsCalls())
func (mock *RepositoryMock) GetAppsCalls() []struct {
} {
	var calls []struct {
	}
	lockRepositoryMockGetApps.RLock()
	calls = mock.calls.GetApps
	lockRepositoryMockGetApps.RUnlock()
	return calls
}

// GetDeviceByDeviceID calls GetDeviceByDeviceIDFunc.
func (mock *RepositoryMock) GetDeviceByDeviceID(deviceID string) (*models.Device, error) {
	if mock.GetDeviceByDeviceIDFunc == nil {
		panic("RepositoryMock.GetDeviceByDeviceIDFunc: method is nil but Repository.GetDeviceByDeviceID was just called")
	}
	callInfo := struct {
		DeviceID string
	}{
		DeviceID: deviceID,
	}
	lockRepositoryMockGetDeviceByDeviceID.Lock()
	mock.calls.GetDeviceByDeviceID = append(mock.calls.GetDeviceByDeviceID, callInfo)
	lockRepositoryMockGetDeviceByDeviceID.Unlock()
	return mock.GetDeviceByDeviceIDFunc(deviceID)
}

// GetDeviceByDeviceIDCalls gets all the calls that were made to GetDeviceByDeviceID.
// Check the length with:
//     len(mockedRepository.GetDeviceByDeviceIDCalls())
func (mock *RepositoryMock) GetDeviceByDeviceIDCalls() []struct {
	DeviceID string
} {
	var calls []struct {
		DeviceID string
	}
	lockRepositoryMockGetDeviceByDeviceID.RLock()
	calls = mock.calls.GetDeviceByDeviceID
	lockRepositoryMockGetDeviceByDeviceID.RUnlock()
	return calls
}

// GetDeviceByDeviceIDAndAppID calls GetDeviceByDeviceIDAndAppIDFunc.
func (mock *RepositoryMock) GetDeviceByDeviceIDAndAppID(deviceID string, appID string) (*models.Device, error) {
	if mock.GetDeviceByDeviceIDAndAppIDFunc == nil {
		panic("RepositoryMock.GetDeviceByDeviceIDAndAppIDFunc: method is nil but Repository.GetDeviceByDeviceIDAndAppID was just called")
	}
	callInfo := struct {
		DeviceID string
		AppID    string
	}{
		DeviceID: deviceID,
		AppID:    appID,
	}
	lockRepositoryMockGetDeviceByDeviceIDAndAppID.Lock()
	mock.calls.GetDeviceByDeviceIDAndAppID = append(mock.calls.GetDeviceByDeviceIDAndAppID, callInfo)
	lockRepositoryMockGetDeviceByDeviceIDAndAppID.Unlock()
	return mock.GetDeviceByDeviceIDAndAppIDFunc(deviceID, appID)
}

// GetDeviceByDeviceIDAndAppIDCalls gets all the calls that were made to GetDeviceByDeviceIDAndAppID.
// Check the length with:
//     len(mockedRepository.GetDeviceByDeviceIDAndAppIDCalls())
func (mock *RepositoryMock) GetDeviceByDeviceIDAndAppIDCalls() []struct {
	DeviceID string
	AppID    string
} {
	var calls []struct {
		DeviceID string
		AppID    string
	}
	lockRepositoryMockGetDeviceByDeviceIDAndAppID.RLock()
	calls = mock.calls.GetDeviceByDeviceIDAndAppID
	lockRepositoryMockGetDeviceByDeviceIDAndAppID.RUnlock()
	return calls
}

// GetDeviceByVersionAndAppID calls GetDeviceByVersionAndAppIDFunc.
func (mock *RepositoryMock) GetDeviceByVersionAndAppID(versionID string, appID string) (*models.Device, error) {
	if mock.GetDeviceByVersionAndAppIDFunc == nil {
		panic("RepositoryMock.GetDeviceByVersionAndAppIDFunc: method is nil but Repository.GetDeviceByVersionAndAppID was just called")
	}
	callInfo := struct {
		VersionID string
		AppID     string
	}{
		VersionID: versionID,
		AppID:     appID,
	}
	lockRepositoryMockGetDeviceByVersionAndAppID.Lock()
	mock.calls.GetDeviceByVersionAndAppID = append(mock.calls.GetDeviceByVersionAndAppID, callInfo)
	lockRepositoryMockGetDeviceByVersionAndAppID.Unlock()
	return mock.GetDeviceByVersionAndAppIDFunc(versionID, appID)
}

// GetDeviceByVersionAndAppIDCalls gets all the calls that were made to GetDeviceByVersionAndAppID.
// Check the length with:
//     len(mockedRepository.GetDeviceByVersionAndAppIDCalls())
func (mock *RepositoryMock) GetDeviceByVersionAndAppIDCalls() []struct {
	VersionID string
	AppID     string
} {
	var calls []struct {
		VersionID string
		AppID     string
	}
	lockRepositoryMockGetDeviceByVersionAndAppID.RLock()
	calls = mock.calls.GetDeviceByVersionAndAppID
	lockRepositoryMockGetDeviceByVersionAndAppID.RUnlock()
	return calls
}

// GetVersionByAppIDAndVersion calls GetVersionByAppIDAndVersionFunc.
func (mock *RepositoryMock) GetVersionByAppIDAndVersion(appID string, versionNumber string) (*models.Version, error) {
	if mock.GetVersionByAppIDAndVersionFunc == nil {
		panic("RepositoryMock.GetVersionByAppIDAndVersionFunc: method is nil but Repository.GetVersionByAppIDAndVersion was just called")
	}
	callInfo := struct {
		AppID         string
		VersionNumber string
	}{
		AppID:         appID,
		VersionNumber: versionNumber,
	}
	lockRepositoryMockGetVersionByAppIDAndVersion.Lock()
	mock.calls.GetVersionByAppIDAndVersion = append(mock.calls.GetVersionByAppIDAndVersion, callInfo)
	lockRepositoryMockGetVersionByAppIDAndVersion.Unlock()
	return mock.GetVersionByAppIDAndVersionFunc(appID, versionNumber)
}

// GetVersionByAppIDAndVersionCalls gets all the calls that were made to GetVersionByAppIDAndVersion.
// Check the length with:
//     len(mockedRepository.GetVersionByAppIDAndVersionCalls())
func (mock *RepositoryMock) GetVersionByAppIDAndVersionCalls() []struct {
	AppID         string
	VersionNumber string
} {
	var calls []struct {
		AppID         string
		VersionNumber string
	}
	lockRepositoryMockGetVersionByAppIDAndVersion.RLock()
	calls = mock.calls.GetVersionByAppIDAndVersion
	lockRepositoryMockGetVersionByAppIDAndVersion.RUnlock()
	return calls
}

// InsertVersionOrUpdateNumOfAppLaunches calls InsertVersionOrUpdateNumOfAppLaunchesFunc.
func (mock *RepositoryMock) InsertVersionOrUpdateNumOfAppLaunches(version *models.Version) error {
	if mock.InsertVersionOrUpdateNumOfAppLaunchesFunc == nil {
		panic("RepositoryMock.InsertVersionOrUpdateNumOfAppLaunchesFunc: method is nil but Repository.InsertVersionOrUpdateNumOfAppLaunches was just called")
	}
	callInfo := struct {
		Version *models.Version
	}{
		Version: version,
	}
	lockRepositoryMockInsertVersionOrUpdateNumOfAppLaunches.Lock()
	mock.calls.InsertVersionOrUpdateNumOfAppLaunches = append(mock.calls.InsertVersionOrUpdateNumOfAppLaunches, callInfo)
	lockRepositoryMockInsertVersionOrUpdateNumOfAppLaunches.Unlock()
	return mock.InsertVersionOrUpdateNumOfAppLaunchesFunc(version)
}

// InsertVersionOrUpdateNumOfAppLaunchesCalls gets all the calls that were made to InsertVersionOrUpdateNumOfAppLaunches.
// Check the length with:
//     len(mockedRepository.InsertVersionOrUpdateNumOfAppLaunchesCalls())
func (mock *RepositoryMock) InsertVersionOrUpdateNumOfAppLaunchesCalls() []struct {
	Version *models.Version
} {
	var calls []struct {
		Version *models.Version
	}
	lockRepositoryMockInsertVersionOrUpdateNumOfAppLaunches.RLock()
	calls = mock.calls.InsertVersionOrUpdateNumOfAppLaunches
	lockRepositoryMockInsertVersionOrUpdateNumOfAppLaunches.RUnlock()
	return calls
}

// UpdateAppVersions calls UpdateAppVersionsFunc.
func (mock *RepositoryMock) UpdateAppVersions(versions []models.Version) error {
	if mock.UpdateAppVersionsFunc == nil {
		panic("RepositoryMock.UpdateAppVersionsFunc: method is nil but Repository.UpdateAppVersions was just called")
	}
	callInfo := struct {
		Versions []models.Version
	}{
		Versions: versions,
	}
	lockRepositoryMockUpdateAppVersions.Lock()
	mock.calls.UpdateAppVersions = append(mock.calls.UpdateAppVersions, callInfo)
	lockRepositoryMockUpdateAppVersions.Unlock()
	return mock.UpdateAppVersionsFunc(versions)
}

// UpdateAppVersionsCalls gets all the calls that were made to UpdateAppVersions.
// Check the length with:
//     len(mockedRepository.UpdateAppVersionsCalls())
func (mock *RepositoryMock) UpdateAppVersionsCalls() []struct {
	Versions []models.Version
} {
	var calls []struct {
		Versions []models.Version
	}
	lockRepositoryMockUpdateAppVersions.RLock()
	calls = mock.calls.UpdateAppVersions
	lockRepositoryMockUpdateAppVersions.RUnlock()
	return calls
}
